{
  "name": "webworker",
  "version": "0.8.4",
  "description": "An implementation of the HTML5 Web Worker API",
  "author": {
    "name": "Peter Griess",
    "email": "pg@std.in"
  },
  "engines": {
    "node": ">=0.4.3"
  },
  "repositories": [
    {
      "type": "git",
      "url": "http://github.com/pgriess/node-webworker"
    }
  ],
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/pgriess/node-webworker/blob/master/LICENSE"
    }
  ],
  "main": "./lib/webworker",
  "readme": "`node-webworkers` is an implementation of the [Web Workers\nAPI](http://www.whatwg.org/specs/web-workers/current-work/) for\n[node.js](http://nodejs.org).\n\nSee the design document\n[here](http://blog.std.in/2010/07/08/nodejs-webworker-design/).\n\n### Example\n\n#### Master source\n\n    var sys = require('sys');\n    var Worker = require('webworker').Worker;\n    \n    var w = new Worker('foo.js');\n    \n    w.onmessage = function(e) {\n        sys.debug('Received mesage: ' + sys.inspect(e));\n        w.terminate();\n    };\n    \n    w.postMessage({ foo : 'bar' });\n\n#### Worker source\n\n    onmessage = function(e) {\n        postMessage({ test : 'this is a test' });\n    };\n    \n    onclose = function() {\n        sys.debug('Worker shuttting down.');\n    };\n\n### API\n\nSupported API methods are\n\n   * `postMessage(e)` in both workers and the parent; messages are in the\n     parent if this is invoked before the child is fully initialized\n   * `onmessage(e)` in both workers and the parent\n   * `onerror(e)`in both workers and the parent\n   * `terminate()` in the parent\n\nIn addition, some nonstandard APIs are provided\n\n   * `onclose()` in the worker (allows for graceful shutdown)\n   * The `postMessage()` method takes an additional optional file descriptor parameter, which\n     will be sent with the message. This descriptor will be passed to\n     `onmessage` handlers as an optional `fd` field. Handlers receiving\n     messages posted without file descriptors will not see an `fd` field. Both\n     the parent and child can send file descriptors using this mechanism.\n   * `Worker.onexit(code, signal)` in the master, which is invoked on the\n     master `Worker` object when the worker process exits.\n   * The `Worker` constructor takes an additional optional object argument,\n     `opts`, which is used as a dictionary of options with the following keys\n      * `args` : A string or array of strings to pass to the executable before the filename to invoke. This can be used to request that the worker start up in debug mode (e.g. `{ 'args' : '--debug-brk' }`). By default this is empty.\n      * `path` : A string naming the executable to invoke for workers. By default this is the value of `process.execPath` (e.g. `node` or similar).\n\n### Installation\n\nThis package can be installed via [npm](http://npmjs.org/) as follows\n\n    % npm install webworker\n\nNote that this requires\n[node-websocket-client](http://github.com/pgriess/node-websocket-client) v0.9.3\nor later. This dependency will be handled automatically by `npm`, but must be\ndealt with manually if installing using another procedure.\n\n### Credits\n\nThis package contains a static snapshot of Micheil Smith's excellent\n[node-websocket-server](http://github.com/miksago/node-websocket-server) with\nsome fixes applied to handle UNIX sockets.\n",
  "readmeFilename": "README.md",
  "_id": "webworker@0.8.4",
  "dist": {
    "shasum": "175565f4d83e8a6a0bf84d90e51b644f8c5e601c"
  },
  "_from": "webworker"
}
